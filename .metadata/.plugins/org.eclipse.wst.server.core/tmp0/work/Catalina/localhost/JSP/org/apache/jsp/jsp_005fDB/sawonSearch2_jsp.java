/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.41
 * Generated at: 2019-06-12 08:13:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp_005fDB;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;

public final class sawonSearch2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
request.setCharacterEncoding("utf-8");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("  body\r\n");
      out.write("  {\r\n");
      out.write("    background: #c166a1;\r\n");
      out.write("    align:center;\r\n");
      out.write("  }\r\n");
      out.write("  </style>\r\n");
      out.write(" \r\n");

String id = request.getParameter("id");
String pw = request.getParameter("pw");
String email = request.getParameter("email");



      out.write("\r\n");
      out.write("\r\n");

Connection conn = null;
String url = "jdbc:oracle:thin:@localhost:1521:xe";
String user = "hr";
String password = "hr";
PreparedStatement ps1 = null;
PreparedStatement ps2 = null;
ArrayList<String> array = new ArrayList<>();
String selected = (String)request.getParameter("select");

try
{
  Class.forName("oracle.jdbc.driver.OracleDriver");
  conn = DriverManager.getConnection(url,user,password);
  String str = "select distinct department_name from departments natural join employees";
  String str2 = "select e.employee_id,e.first_name,e.salary,"
		  +" e.hire_date, d.department_name "
		  +" from employees e, departments d "
		  +" where e.department_id = d.department_id "
		  +" and d.department_name = ?";
  
  String str3 = "select distinct * from departments natural join employees where department_name=?";
  ps1=conn.prepareStatement(str); // 총 부서명 중복없이 찾아오는것
  ResultSet rss = ps1.executeQuery(); //부서명만 실행   select용
  ps2 = conn.prepareStatement(str3);
  ps2.setString(1,selected);
  
  
  ResultSet rss2 = ps2.executeQuery(); //검색값 찾아오는용
  
  while(rss.next())
	{
		array.add(rss.getString("department_name"));
	}
 
   for(int i=0;i<array.size();i++)
   {
	   out.println(array.get(i));
   }
   
   
      out.write("\r\n");
      out.write("   <form action=\"sawonSearch2.jsp\" method=\"get\">\r\n");
      out.write("   <table border=2 width=\"800px\">\r\n");
      out.write("   <tr>\r\n");
      out.write("   <td  colspan=5> 검색할 부서를 선택하세요 \r\n");
      out.write("   <select name=\"select\" value=\"select\" id=\"select\">\r\n");
      out.write("   ");

   for(int i=0;i<array.size();i++)   
   {
      out.write(" \r\n");
      out.write("\t   <option value=\"");
      out.print((String)array.get(i));
      out.write("\">\r\n");
      out.write("\t   ");
      out.print((String)array.get(i));
      out.write("\r\n");
      out.write("\t   </option>\r\n");
      out.write("\t");

	}
   
   
      out.write("\r\n");
      out.write("   </select>\r\n");
      out.write("   <input type=\"submit\" value=\"검색\">\r\n");
      out.write("   </td>\r\n");
      out.write("   </tr>\r\n");
      out.write("   <tr><td>사원아이디</td><td>이름</td><td>급여</td><td>입사일</td><td>부서명</td></tr>\r\n");
      out.write("  \r\n");
      out.write("   ");

   
   while(rss2.next())
   {
	   
	   
      out.write("\r\n");
      out.write("\t   <tr><td>");
      out.print(rss2.getString("EMPLOYEE_ID") );
      out.write("</td><td>");
      out.print(rss2.getString("FIRST_NAME")+" "+rss2.getString("LAST_NAME") );
      out.write("</td><td>");
      out.print(rss2.getInt("SALARY") );
      out.write("</td><td>");
      out.print(rss2.getDate("HIRE_DATE") );
      out.write("</td><td>");
      out.print(rss.getString("DEPARTMENT_NAME") );
      out.write("</td></tr>\r\n");
      out.write("\t   ");

   }
   

}
catch(Exception e)
{
  e.getStackTrace();
}
finally
{
  try
  {
    if(ps1!=null)
    {
      ps1.close();
    }
    if(conn!=null)
    {
      conn.close();
    }
  }
  catch(Exception e2)
  {
    e2.getStackTrace();
  }
}


      out.write("\r\n");
      out.write("   </table>\r\n");
      out.write("  \r\n");
      out.write("   </form>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
